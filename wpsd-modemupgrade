#!/bin/bash
#
#########################################################
#                                                       #
#            WPSD Modem Firmware Update Utility         #
#                  Chip Cuccio (W0CHP)                  #
#                                                       #
#########################################################
#
if [ "$(id -u)" != "0" ]; then
  echo -e "\nYou need to be root to run this command...\n"
  exit 1
fi

#
# Non-interactive/scripted mode, pass "NP=1" env. var. E.g. `sudo NP=1 wpsd-modemupgrade <modem_type>`
#

source /usr/local/sbin/.wpsd-common-funcs
hardware=$(grep -i hardware /etc/WPSD-release | awk -F "= " '{print $2}')

MMDVM_HS_VERSION=$(awk -F "=" '/mmdvm_hs/ {print $2}' /usr/local/bin/firmware/versions.txt)
RPT_VERSION=$(awk -F "=" '/rpt/ {print $2}' /usr/local/bin/firmware/versions.txt)
DVMEGA_VERSION=$(awk -F "=" '/dvmega/ {print $2}' /usr/local/bin/firmware/versions.txt)

# Check CLI arguments and determine the modem type and its respective FW file...
if [ "$1" ]; then
  case $1 in
    # Common HS_HATs
    hs_hat)
      firmware_file="mmdvm_hs_hat_fw.bin"
      MMDVM_HS_GPIO=true
      VERSION=${MMDVM_HS_VERSION}
      ;;
    hs_hat-12mhz)
      firmware_file="mmdvm_hs_hat_fw-12mhz.bin"
      MMDVM_HS_GPIO=true
      VERSION=${MMDVM_HS_VERSION}
      ;;
    hs_dual_hat)
      firmware_file="mmdvm_hs_dual_hat_fw.bin"
      MMDVM_HS_GPIO=true
      VERSION=${MMDVM_HS_VERSION}
      ;;
    hs_dual_hat-12mhz)
      firmware_file="mmdvm_hs_dual_hat_fw-12mhz.bin"
      MMDVM_HS_GPIO=true
      VERSION=${MMDVM_HS_VERSION}
      ;;
    # Less common HS_HATs
    hs_hat_ambe)
      firmware_file="hs_hat_ambe.bin"
      MMDVM_HS_GPIO=true
      VERSION=${MMDVM_HS_VERSION}
      ;;
    hs_hat_generic)
      firmware_file="generic_gpio_fw.bin"
      MMDVM_HS_GPIO=true
      VERSION=${MMDVM_HS_VERSION}
      ;;
    hs_hat_generic_duplex)
      firmware_file="generic_duplex_gpio_fw.bin"
      MMDVM_HS_GPIO=true
      VERSION=${MMDVM_HS_VERSION}
      ;;
    hs_hat_generic_duplex-usb)
      firmware_file="generic_duplex_usb_fw.bin"
      USB_MODEM=true
      DEV_USB_SER="/dev/ttyACM0"
      VERSION=${MMDVM_HS_VERSION}
      ;;
    # more obscure stuff - not as common anymore
    hs_hat_nano_hotspot)
      firmware_file="nano_hotspot_fw.bin"
      MMDVM_HS_GPIO=true
      VERSION=${MMDVM_HS_VERSION}
      ;;
    hs_hat_nano_hotspot-duplex)
      firmware_file="hs_hat_nano_hotspot-duplex.bin"
      MMDVM_HS_GPIO=true
      VERSION=${MMDVM_HS_VERSION}
      ;;
    nanodv_npi)
      firmware_file="nanodv_npi_fw.bin"
      MMDVM_HS_GPIO=true
      VERSION=${MMDVM_HS_VERSION}
      ;;
    nanodv_usb)
      firmware_file="nanodv_usb_fw.bin"
      USB_MODEM=true
      DEV_USB_SER="/dev/ttyACM0"
      VERSION=${MMDVM_HS_VERSION}
      ;;
    # Vendor MMDVM_HS / ZUMSpot
    euronode)
      firmware_file="euronode_pi_fw.bin"
      MMDVM_HS_GPIO=true
      VERSION=${MMDVM_HS_VERSION}
      stmVer="0.7"
      ;;
    hs_hat_lonestar-usb)
      firmware_file="lonestar_usb_fw.bin"
      USB_MODEM=true
      VERSION=${MMDVM_HS_VERSION}
      ;;
    skybridge)
      firmware_file="skybridge_rpi_fw.bin"
      MMDVM_HS_GPIO=true
      VERSION=${MMDVM_HS_VERSION}
      ;;
    zum_rpi)
      firmware_file="zumspot_rpi_fw.bin"
      MMDVM_HS_GPIO=true
      VERSION=${MMDVM_HS_VERSION}
      ;;
    zum_rpi-duplex)
      firmware_file="zumspot_duplex_fw.bin"
      MMDVM_HS_GPIO=true
      VERSION=${MMDVM_HS_VERSION}
      ;;
    zum_usb)
      firmware_file="zumspot_usb_fw.bin"
      USB_MODEM=true
      DEV_USB_SER="/dev/ttyACM0"
      VERSION=${MMDVM_HS_VERSION}
      ;;
    zum_libre)
      firmware_file="zumspot_libre_fw.bin"
      MMDVM_HS_GPIO=true
      DEV_USB_SER="/dev/ttyACM0"
      VERSION=${MMDVM_HS_VERSION}
      ;;
    # DV Mega
    dvmega_gpio)
      firmware_file="dvmega_gpio.hex"
      DVMega_GPIO=true
      VERSION=${DVMEGA_VERSION}
      ;;
    dvmega_usb_uno)
      firmware_file="dvmega_usb_uno.hex"
      DVMega_USB=true
      DEV_USB_SER="/dev/ttyACM0"
      VERSION=${DVMEGA_VERSION}
      ;;
    dvmega_usb_mega)
      firmware_file="dvmega_usb_mega.hex"
      DVMega_USB=true
      DEV_USB_SER="/dev/ttyACM0"
      VERSION=${DVMEGA_VERSION}
      ;;
    # MMDVM Repeater Boards
    rpt_nucleo-64)
      firmware_file="F446RE.elf"
      MMDVM_PI=true
      stmVer="0.5"
      VERSION=${RPT_VERSION}
      ;;
    rpt_nucleo-144)
      firmware_file="F767ZI.elf"
      MMDVM_PI=true
      stmVer="0.7"
      VERSION=${RPT_VERSION}
      ;;
    rpt_mmdvm_hat-v0.2)
      firmware_file="MMDVM_RPT_Hat_0.2.bin"
      MMDVM_PI=true
      stmVer="0.7"
      VERSION=${RPT_VERSION}
      ;;
    rpt_mmdvm_hat-v0.3)
      firmware_file="MMDVM_RPT_Hat_0.3.bin"
      MMDVM_PI=true
      stmVer="0.7"
      VERSION=${RPT_VERSION}
      ;;
    rpt_zum-v0.9)
      firmware_file="ZUM_MMDVM-Pi_0.9-F4.bin"
      MMDVM_PI=true
      stmVer="0.7"
      VERSION=${RPT_VERSION}
      ;;
    rpt_zum-v1.0-F4)
      firmware_file="ZUM_MMDVM-Pi_1.0-F4.bin"
      MMDVM_PI=true
      stmVer="0.7"
      VERSION=${RPT_VERSION}
      ;;
    rpt_zum-v1.0-F7)
      firmware_file="ZUM_MMDVM-Pi_1.0-F7.bin"
      MMDVM_PI=true
      stmVer="0.7"
      VERSION=${RPT_VERSION}
      ;;
    rpt_builder_v3)
      firmware_file="Repeater-Builder_v3.bin"
      MMDVM_PI=true
      stmVer="0.5"
      VERSION=${RPT_VERSION}
      ;;
    rpt_builder_v4)
      firmware_file="Repeater-Builder_v4.bin"
      MMDVM_PI=true
      stmVer="0.5"
      VERSION=${RPT_VERSION}
      ;;
    rpt_builder_v5)
      firmware_file="Repeater-Builder_v5.bin"
      MMDVM_PI=true
      stmVer="0.7"
      VERSION=${RPT_VERSION}
      ;;
    rpt_builder_mtr2k_v3-F446)
      firmware_file="Repeater-Builder_MTR2K_v3-446.bin"
      MMDVM_PI=true
      stmVer="0.5"
      VERSION=${RPT_VERSION}
      ;;
    rpt_builder_mtr2k_v3-F405)
      firmware_file="Repeater-Builder_MTR2K_v3-405.bin"
      MMDVM_PI=true
      stmVer="0.5"
      VERSION=${RPT_VERSION}
      ;;
    list|-l|--list)
      echo "hs_hat"
      echo "hs_hat-12mhz"
      echo "hs_dual_hat"
      echo "hs_dual_hat-12mhz"
      echo "hs_hat_ambe"
      echo "hs_hat_generic"
      echo "hs_hat_generic_duplex"
      echo "hs_hat_generic_duplex-usb"
      echo "hs_hat_nano_hotspot"
      echo "nanodv_npi"
      echo "nanodv_usb"
      echo "hs_hat_lonestar-usb"
      echo "euronode"
      echo "skybridge"
      echo "zum_rpi"
      echo "zum_rpi-duplex"
      echo "zum_usb"
      echo "zum_libre"
      echo "dvmega_gpio"
      echo "dvmega_usb_uno"
      echo "dvmega_usb_mega"
      echo "rpt_nucleo-64"
      echo "rpt_nucleo-144"
      echo "rpt_mmdvm_hat-v0.2"
      echo "rpt_mmdvm_hat-v0.3"
      echo "rpt_zum-v0.9"
      echo "rpt_zum-v1.0-F4"
      echo "rpt_zum-v1.0-F7"
      echo "rpt_builder_v3"
      echo "rpt_builder_v4"
      echo "rpt_builder_v5"
      echo "rpt_builder_mtr2k_v3-F446"
      echo "rpt_builder_mtr2k_v3-F405"
      exit 0
      ;;
    *)
      echo "Your choice of the modem, '${1}', is not supported in this program."
      exit 1
      ;;
  esac
fi

if [[ ${hardware} == "NanoPi" ]]; then
    stmVer="0.7"
fi

# gpio front/back compat. for pi5 and older Pi SBCs; since Pi5 has its own GPIO chip (gpiochip4 [pinctrl-rp1])
getGPIOpinMaps=$(ls -la /sys/class/gpio/gpiochip* | grep "0000.gpio" | sed -n "s/.*gpiochip\([0-9]*\).*/\1/p" | tail -n 1)
getGPIOpinMaps=${getGPIOpinMaps/504/0}
pin20=$((getGPIOpinMaps + 20))
pin21=$((getGPIOpinMaps + 21))

#
# Output some useful information when no variables are passed
#
if [ -z "$1" ]
then
  clear
  echo "This utility is used to flash/upgrade your hotspot/repeater modem."
  if [[ "${EXT_CALL}" != "1" ]]; then
      echo -e "${NOTE} ${COL_LIGHT_YELLOW}Note:${COL_NC} No modem specified!"
  fi
  echo "To use the command, you need to specify your modem type..."
  echo "Please choose from the list below, and run this command again:"
  echo "------------------------------------------------------------------------------------------------------"
  echo "  Modem Type						   Command"
  echo "------------------------------------------------------------------------------------------------------"
  echo "  MMDVM_HS_Hat  (14.7456MHz TCXO) GPIO:			   wpsd-modemupgrade hs_hat"
  echo "  MMDVM_HS_Hat  (12.2880MHz TCXO) GPIO:			   wpsd-modemupgrade hs_hat-12mhz"
  echo "  MMDVM_HS_Dual_Hat (14.7456MHz TCXO) GPIO:		   wpsd-modemupgrade hs_dual_hat"
  echo "  MMDVM_HS_Dual_Hat (12.2880MHz TCXO) GPIO:		   wpsd-modemupgrade hs_dual_hat-12mhz"
  echo ""
  echo "  ZUMSpot RPi boards/hotspots GPIO:                        wpsd-modemupgrade zum_rpi"
  echo "  ZUMSpot RPi duplex GPIO board/hotspots:                  wpsd-modemupgrade zum_rpi-duplex"
  echo "  ZUMspot USB stick:                                       wpsd-modemupgrade zum_usb"
  echo "  ZUMspot Libre Kit or generic MMDVM_HS board:             wpsd-modemupgrade zum_libre"
  echo ""
  echo "  DVMega - Pi Hat (Single or Dual Band) GPIO:		   wpsd-modemupgrade dvmega_gpio"
  echo "  DVMega - Shield for Arduino Uno USB (ttyUSB0):	   wpsd-modemupgrade dvmega_usb_uno"
  echo "  DVMega - Shield for Arduino Mega USB (ttyUSB0):	   wpsd-modemupgrade dvmega_usb_mega"
  echo "  DVMega - EuroNode hotspots (14.7456MHz TCXO) GPIO:	   wpsd-modemupgrade euronode"
  echo ""
  echo "  SkyBridge hotspots (14.7456MHz TCXO) GPIO:		   wpsd-modemupgrade skybridge"
  echo "  NANO_DV NPi GPIO by BG4TGO:                              wpsd-modemupgrade nanodv_npi"
  echo "  NANO_DV USB by BG4TG:                                    wpsd-modemupgrade nanodb_usb"
  echo "  Nano_hotSPOT by BI7JTA (14.7456MHz TCXO) GPIO:	   wpsd-modemupgrade hs_hat_nano_hotspot"
  echo "  Nano_hotSPOT Duplex by VR2VYE (14.7456MHz TCXO) GPIO:	   wpsd-modemupgrade hs_hat_nano_hotspot-duplex"
  echo "  LoneStar LS MMDVM USB (14.7456MHz TCXO) USB:		   wpsd-modemupgrade hs_hat_lonestar-usb"
  echo ""
  echo "  HS_HAT_AMBE (14.7456MHz TCXO) GPIO:			   wpsd-modemupgrade hs_hat_ambe"
  echo "  MMDVM_HS_GENERIC (14.7456MHz TCXO) GPIO:		   wpsd-modemupgrade hs_hat_generic"
  echo "  MMDVM_HS_GENERIC_DUPLEX (14.7456MHz TCXO) GPIO:	   wpsd-modemupgrade hs_hat_generic_duplex"
  echo "  MMDVM_HS_GENERIC_DUPLEX (14.7456MHz TCXO) USB:	   wpsd-modemupgrade hs_hat_generic_duplex-usb"
  echo ""
  echo "  Rptr - Nucleo64 F446RE GPIO:				   wpsd-modemupgrade rpt_nucleo-64"
  echo "  Rptr - Nucleo144 F767ZI GPIO:				   wpsd-modemupgrade rpt_nucleo-144"
  echo "  Rptr - MMDVM_RPT_Hat v0.2 GPIO:			   wpsd-modemupgrade rpt_mmdvm_hat-v0.2"
  echo "  Rptr - MMDVM_RPT_Hat v0.3 GPIO:			   wpsd-modemupgrade rpt_mmdvm_hat-v0.3"
  echo "  Rptr - ZUM Radio MMDVM for Pi v0.9 GPIO:		   wpsd-modemupgrade rpt_zum-v0.9"
  echo "  Rptr - ZUM Radio MMDVM for Pi v1.0 (F4) GPIO:		   wpsd-modemupgrade rpt_zum-v1.0-F4"
  echo "  Rptr - ZUM Radio MMDVM for Pi v1.0 (F7) GPIO:		   wpsd-modemupgrade rpt_zum-v1.0-F7"
  echo "  Rptr - Repeater Builder STM32_DVM v3 GPIO:		   wpsd-modemupgrade rpt_builder_v3"
  echo "  Rptr - Repeater Builder STM32_DVM v4 GPIO:		   wpsd-modemupgrade rpt_builder_v4"
  echo "  Rptr - Repeater Builder STM32_DVM v5 GPIO:		   wpsd-modemupgrade rpt_builder_v5"
  echo "  Rptr - Repeater Builder STM32_DVM_MTR2k v3 (F446) GPIO:  wpsd-modemupgrade rpt_builder_mtr2k_v3-F446"
  echo "  Rptr - Repeater Builder STM32_DVM_MTR2k v3 (F405) GPIO:  wpsd-modemupgrade rpt_builder_mtr2k_v3-F405"
  echo "------------------------------------------------------------------------------------------------------"
  echo "IMPORTANT: Please note, that we are not firmware developers, and we offer no support for firmware."
  echo "------------------------------------------------------------------------------------------------------"

  exit 0

fi

if [ -t 1 ]; then # term. only
    clear

    echo -e -n "${COL_LIGHT_CYAN}${BOLD}"
    echo '    _      _____  _______ 
   | | /| / / _ \/ __/ _ \
   | |/ |/ / ___/\ \/ // /
   |__/|__/_/  /___/____/'
    echo -e -n "${COL_NC}${COL_LIGHT_ORANGE}${BOLD}Modem Firmware Update Utility${COL_NC}\n\n"

    if [ -n "$modem_description_line" ]; then
	echo -e "${BULL} Found modem installed:"
	echo "    $modem_description_line"
	echo ""
    fi
fi

#
# Download & flash the latest firmware for the type specified in the arg.
#
if [ "$1" ] ; then
  # Get the latest FW version
  echo -e "    ${INFO} Latest firmware version: ${COL_LIGHT_BLUE}${BOLD}${VERSION}${COL_NC}\n"

  if [[ "$NP" != "1" ]]; then
    read -n 1 -s -r -p "Press any key to flash '${1}' firmware version ${VERSION} to this modem, or 'q' to abort... "
    echo ""
    echo ""

    if [[ "$REPLY" =~ [qQ] ]]; then
      echo ""
      echo "Aborted by user."
      echo ""
      exit 1
    fi
  fi

  flash_modem() { # the meat!
    local firmware_file="$2"  # Pass the firmware_file as an argument

    # Verify that the file exists
    echo -e "${BULL} Checking '$1' firmware version $VERSION..."
    if [[ -f "/usr/local/bin/firmware/${firmware_file}" ]]; then
      echo -e "    ${COL_BRIGHT_GREEN}${TICK} Complete."
    else
      echo -e "    ${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} Firmware file does not exist for selected modem and version. Aborting."
      exit 1
    fi
    sleep 1

    # checksum valid; flash!
    echo -e "\n${BULL} Preparing to flash '$1' modem with firmware version ($VERSION)..."
    # Stop MMDVMHost process to free up the serial port
    systemctl stop pistar-watchdog.timer >/dev/null 2>&1
    systemctl stop pistar-watchdog.service >/dev/null 2>&1
    systemctl stop mmdvmhost.timer >/dev/null 2>&1
    systemctl stop mmdvmhost.service >/dev/null 2>&1

    # NanoPI GPIO handling
    if [[ ${hardware} == "NanoPi" ]]; then
        gpio mode 3 out
        gpio mode 4 out
        gpio write 4 1
        gpio write 3 0
        sleep 1
        gpio write 3 1
    fi

    if [ -t 1 ] && [ "$VERBOSE" != 1 ]; then # term. only
        spinner &
        # Capture the spinner's PID
        SPINNER_PID=$!
    else
	echo -e "    ${NOTE}  Flashing modem - please wait..."
    fi

    DFU_RST="/usr/local/bin/firmware/utils/upload-reset"
    DFU_UTIL="/usr/local/bin/firmware/utils/dfu-util"
    ST_FLASH="/usr/local/bin/firmware/utils/st-flash"
    STM32FLASH="/usr/local/bin/firmware/utils/stm32flash"

    # flash handling for USB modems...
    if [ "$USB_MODEM" = true ]; then
	if [ "$VERBOSE" = 1 ] ; then
	    $DFU_RST $DEV_USB_SER 750
	    $DFU_UTIL -D /usr/local/bin/firmware/${firmware_file} -d 1eaf:0003 -a 2 -R -R
	else
	    $DFU_RST $DEV_USB_SER 750 2>&1
	    output=$(eval $DFU_UTIL -D /usr/local/bin/firmware/${firmware_file} -d 1eaf:0003 -a 2 -R -R 2>&1)
	fi
    elif [ "$MMDVM_PI" = true ]; then
	if [ "$VERBOSE" = 1 ] ; then
	    /usr/local/bin/firmware/utils/stm32flash-${stmVer} -i ${pin20},-${pin21},${pin21}:-${pin20},${pin21} /dev/ttyAMA0 >/dev/null 2>&1
	    /usr/local/bin/firmware/utils/stm32flash-${stmVer} -v -w /usr/local/bin/firmware/${firmware_file} -g 0x0 -R /dev/ttyAMA0
	else
	    /usr/local/bin/firmware/utils/stm32flash-${stmVer} -i ${pin20},-${pin21},${pin21}:-${pin20},${pin21} /dev/ttyAMA0 >/dev/null 2>&1
	    output=$(eval /usr/local/bin/firmware/utils/stm32flash-${stmVer} -v -w /usr/local/bin/firmware/${firmware_file} -g 0x0 -R /dev/ttyAMA0 2>&1)
	fi
    elif [ "$MMDVM_HS_GPIO" = true ]; then
	# Upload the firmware to the modem and place output into buffer for fail/success checking logic
	if [ "$VERBOSE" = 1 ] ; then
	    if [[ ${hardware} == "NanoPi" ]]; then
		/usr/local/bin/firmware/utils/stm32flash-${stmVer} -v -w /usr/local/bin/firmware/${firmware_file} /dev/ttyAMA0 -R -i 200,-3,3:-200,-3,3
	    else
	        $STM32FLASH -k /dev/ttyAMA0 # try to disable write protection (doesn't always work on some annoying Chinesium locked modems)
	        $STM32FLASH -v -w /usr/local/bin/firmware/${firmware_file} -g 0x0 -R -i ${pin20},-${pin21},${pin21}:-${pin20},${pin21} /dev/ttyAMA0
	    fi
	else
	    if [[ ${hardware} == "NanoPi" ]]; then
		output=$(eval /usr/local/bin/firmware/utils/stm32flash-${stmVer} -v -w /usr/local/bin/firmware/${firmware_file} /dev/ttyAMA0 -R -i 200,-3,3:-200,-3,3 2>&1)
	    else
		$STM32FLASH -k /dev/ttyAMA0 >/dev/null 2>&1 # try to disable write protection (doesn't always work on some annoying Chinesium locked modems)
		output=$(eval $STM32FLASH -v -w /usr/local/bin/firmware/${firmware_file} -g 0x0 -R -i ${pin20},-${pin21},${pin21}:-${pin20},${pin21} /dev/ttyAMA0 2>&1)
	    fi
	fi
    elif [ "$DVMega_GPIO" = true ]; then
        # DV Mega mounted on GPIO
        if [ "$VERBOSE" = 1 ] ; then
            gpio mode 7 out
            gpio write 7 1
            sleep 0.30
            gpio write 7 0
            gpio write 7 1
            sleep 0.5
            /usr/bin/avrdude -p m328p -c arduino -P /dev/ttyAMA0 -b 115200 -F -U flash:w:/usr/local/bin/firmware/${firmware_file} -v
        else
            gpio mode 7 out >/dev/null 2>&1
            gpio write 7 1 >/dev/null 2>&1
            sleep 0.30 >/dev/null 2>&1
            gpio write 7 0 >/dev/null 2>&1
            gpio write 7 1 >/dev/null 2>&1
            sleep 0.5 >/dev/null 2>&1
            output=$(eval /usr/bin/avrdude -p m328p -c arduino -P /dev/ttyAMA0 -b 115200 -F -U flash:w:/usr/local/bin/firmware/${firmware_file} 2>&1)
        fi
    elif [ "$DVMega_USB" = true ]; then
        # DV Mega mounted on Uno
        if [ "$VERBOSE" = 1 ] ; then
            /usr/bin/avrdude -p m328p -c arduino -P /dev/ttyUSB0 -b 115200 -F -U flash:w:/usr/local/bin/firmware/${firmware_file} -v
        else
            output=$(eval /usr/bin/avrdude -p m328p -c arduino -P /dev/ttyUSB0 -b 115200 -F -U flash:w:/usr/local/bin/firmware/${firmware_file} 2>&1)
        fi
    else  # Catch-all
        if [ -t 1 ] && [ "$VERBOSE" != 1 ]; then # term. only
	    # Kill the spinner process (make the cursor visible again)
	    kill $SPINNER_PID &>/dev/null
        fi
        echo -e "    ${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} Modem flashing failed. Modem Connection type not specified.\n"
	systemctl start mmdvmhost.service >/dev/null 2>&1
	systemctl start mmdvmhost.timer >/dev/null 2>&1
	systemctl start pistar-watchdog.timer >/dev/null 2>&1
	systemctl start pistar-watchdog.service >/dev/null 2>&1
	echo ""
        exit 0
    fi

    # did we flash successfully?
    if [ "$VERBOSE" != 1 ] ; then
	flash_successful=false  # Initialize to false
	if [ "$USB_MODEM" = true ]; then # usb dfu success output
	    if [[ $output == *"state(8) = dfuMANIFEST-WAIT-RESET, status(0) = No error condition is present"* && $output == *"Done!"* ]]; then
		flash_successful=true
	    fi
        elif [ "$MMDVM_PI" = true ] || [ "$MMDVM_HS_GPIO" = true ]; then # stm32flash success output
	    if [[ ${hardware} == "NanoPi" ]]; then
		if [[ $output == *"(100.00%) Done"* ]] && ([[ $output == *"0x0800d604"* || $output == *"0x0800d608"* ]]); then
		    flash_successful=true
		fi
	    else # rpis
		if [[ $output == *"(100.00%) Done"* && $output == *"0x08000000... done"* ]]; then
		    flash_successful=true
		fi
	    fi
        elif [ "$DVMega_GPIO" = true ] || [ "$DVMega_USB" = true ]; then # avrdude success output
            if [[ $output == *"bytes of flash verified"* ]]; then
                flash_successful=true
            fi
	fi
    fi

    if [ "$VERBOSE" != 1 ] ; then
	if $flash_successful; then
  	    # reset the fw version # in the mmdvmhost logs
  	    sed -i '/MMDVM protocol version: 1, description:/d; /MMDVM protocol version: 2, description:/d' /var/log/WPSD/MMDVM-*.log  >/dev/null 2>&1
	    /usr/local/sbin/.wpsd-sys-cache >/dev/null 2>&1
  	    # re-nit!
  	    systemctl start mmdvmhost.service >/dev/null 2>&1
  	    systemctl start mmdvmhost.timer >/dev/null 2>&1
  	    systemctl start pistar-watchdog.timer >/dev/null 2>&1
	    systemctl start pistar-watchdog.service >/dev/null 2>&1
  	    echo -e -n "    ${TICK} ${COMPL} Modem firmware flash successful!\n        Modem reinitialized.\n"
  	    echo ""
	    echo -e "${INFO} ${COL_LIGHT_YELLOW}Note:${COL_NC} You will need to refresh your dashboard to reflect the updated firmware version.\n"
	else
	    echo -e "    ${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} Modem flashing failed. The serial port was either busy, or the modem is"
	    echo -e "               possibly locked from the vendor. You can try running this command again,"
	    echo -e "               or you can contact the supplier of your modem/hotspot for support.\n"
	    systemctl start mmdvmhost.service >/dev/null 2>&1
	    systemctl start mmdvmhost.timer >/dev/null 2>&1
	    systemctl start pistar-watchdog.timer >/dev/null 2>&1
	    systemctl start pistar-watchdog.service >/dev/null 2>&1
	    echo ""
	fi
    else
	# reset the fw version # in the mmdvmhost logs
  	sed -i '/MMDVM protocol version: 1, description:/d; /MMDVM protocol version: 2, description:/d' /var/log/WPSD/MMDVM-*.log  >/dev/null 2>&1
	/usr/local/sbin/.wpsd-sys-cache >/dev/null 2>&1
	# re-nit!
	systemctl start mmdvmhost.service >/dev/null 2>&1
	systemctl start mmdvmhost.timer >/dev/null 2>&1
	systemctl start pistar-watchdog.timer >/dev/null 2>&1
	systemctl start pistar-watchdog.service >/dev/null 2>&1
    fi

    if [ -t 1 ] && [ "$VERBOSE" != 1 ]; then # term. only
	# Kill the spinner process (make the cursor visible again)
	kill $SPINNER_PID &>/dev/null
    fi

    exit 0
  }

  if [ -t 1 ]; then
      # run via terminal, only output to screen
      /usr/local/sbin/wpsd-modemreset boot >/dev/null 2>&1
      flash_modem "${1}" "${firmware_file}"
      /usr/local/sbin/wpsd-modemreset boot >/dev/null 2>&1
    else
      # if not run via terminal, log everything into a log file
      /usr/local/sbin/wpsd-modemreset boot >/dev/null 2>&1
      flash_modem "${1}" "${firmware_file}" >> /var/log/WPSD/WPSD-modemflash.log 2>&1
      /usr/local/sbin/wpsd-modemreset boot >/dev/null 2>&1
    fi

fi
exit 0

