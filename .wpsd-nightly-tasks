#!/bin/bash

#
# WPSD Nightly Tasks  - W0CHP
#

if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi

if [ ! -t 1 ]; then
  exec &> /tmp/WPSD-nightly-tasks.log
fi

source /usr/local/sbin/.wpsd-common-funcs

OptIntoDiags_value=${OptIntoDiags_value:-true}

pkill .wpsd-running-tasks > /dev/null 2>&1
pkill .wpsd-slipstream-tasks > /dev/null 2>&1

# legacy config migration
legacy_config_php="/var/www/dashboard/config/config.php"
legacy_language_php="/var/www/dashboard/config/language.php"
legacy_ircddblocal_php="/var/www/dashboard/config/ircddblocal.php"
new_config="/etc/WPSD-Dashboard-Config.ini"
if [[ ! -f "$new_config" || ! -s "$new_config" ]]; then
    echo "[WPSD]" > "$new_config"
    echo "Callsign = " >> "$new_config"
    echo "Timezone = " >> "$new_config"
    echo "DashLanguage = " >> "$new_config"
    echo "TimeFormat = " >> "$new_config"
    echo "UpdateNotifier = " >> "$new_config"
fi
time_format=$(grep -oP "define\('TIME_FORMAT', '\K[0-9]+" "$legacy_config_php")
auto_update_check=$(grep -oP "define\('AUTO_UPDATE_CHECK', '\K\w+" "$legacy_config_php")
timezone=$(grep -oP "date_default_timezone_set\('\K[^']+" "$legacy_config_php")
pistar_language=$(grep -oP "pistarLanguage='\K[^']+" "$legacy_language_php")
callsign=$(grep -oP "callsign='\K[^']+" "$legacy_ircddblocal_php")
if [[ -z "$callsign" ]]; then
    :
else
    # Update the new config file with the extracted values
    if [[ -n "$callsign" ]]; then
        sed -i "s|^Callsign = .*|Callsign = $callsign|" "$new_config"
    fi
    if [[ -n "$time_format" ]]; then
        sed -i "s|^TimeFormat = .*|TimeFormat = $time_format|" "$new_config"
    fi
    if [[ -n "$auto_update_check" ]]; then
        sed -i "s|^UpdateNotifier = .*|UpdateNotifier = $auto_update_check|" "$new_config"
    fi
    if [[ -n "$timezone" ]]; then
        sed -i "s|^Timezone = .*|Timezone = $timezone|" "$new_config"
    fi
    if [[ -n "$pistar_language" ]]; then
        sed -i "s|^DashLanguage = .*|DashLanguage = $pistar_language|" "$new_config"
    fi
fi

# maint. tasks
/usr/local/sbin/.wpsd-backend-maint > /dev/null 2>&1

# Generate /etc/motd
/usr/local/sbin/.wpsd-motdgen

# Purge the logs older than 2 days
rm -f $(find /var/log/pi-star/ -type f -mtime +1 -print)
rm -f $(find /var/log/ -type f -mtime +0 -print | grep .gz)

# Shrink nginx error log to stop it getting out of hand
#echo "$(tail -500 /var/log/nginx/error.log)" > /var/log/nginx/error.log
debian_version=$(lsb_release -rs | cut -d. -f1)
if [ "$debian_version" -lt 12 ]; then
    echo "$(tail -500 /var/log/php7.4-fpm.log)" > /var/log/php7.4-fpm.log
else
    echo "$(tail -500 /var/log/php8.2-fpm.log)" > /var/log/php8.2-fpm.log
fi

# log file perms
chown -R mmdvm:mmdvm /var/log/pi-star > /dev/null 2>&1
chmod 775 /var/log/pi-star > /dev/null 2>&1

process_log_file > /dev/null 2>&1

if [ "$OptIntoDiags_value" != 'true' ] ; then
    echo "User has opted out of updates and diagnostics. Exiting..."
    exit 1
fi

export GIT_HTTP_CONNECT_TIMEOUT="10"
export GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (WPSD-Nightly-Tasks) Ver.# ${dashVer} Call:${CALL} UUID:${uuidStr} [${osName}]"

echo -e "\nStopping services..."
/usr/local/sbin/wpsd-services fullstop > /dev/null 2>&1

echo -e "\nChecking connectivity to WPSD update server..."
conn_check
if $connection_established; then
    echo -e "  Connection established!\n"

    echo -e "\nUpdating sbins..."
    cd /usr/local/sbin
    #git update-index --no-assume-unchanged pistar-upnp.service # get rid of legacy index not that upnp rules are in /etc/wpsd-upnp-rules
    git update-index --assume-unchanged pistar-firewall
    git --work-tree=/usr/local/sbin --git-dir=/usr/local/sbin/.git reset --hard origin/master
    git --work-tree=/usr/local/sbin --git-dir=/usr/local/sbin/.git pull origin master
    git --work-tree=/usr/local/sbin --git-dir=/usr/local/sbin/.git reset --hard origin/master

    echo -e "\nResetting firewall back to user prefs..."
    if [ "$fwState" == "enabled" ]; then
	/usr/local/sbin/wpsd-system-manager -efw
    else
	/usr/local/sbin/wpsd-system-manager -dfw
    fi

    echo -e "\nUpdating dashboard code..."
    # Update the Dashboard
    # WPSD has more than one branch. So depending on what WPSD Web Code branch the user has installed, check that branch.
    gitFolder="/var/www/dashboard"
    gitBranch="$( git --git-dir=${gitFolder}/.git symbolic-ref --short HEAD )"
    cd ${gitFolder}
    git stash clear # housekeeping
    git reset --hard origin/master
    git --work-tree=/var/www/dashboard --git-dir=/var/www/dashboard/.git pull origin ${gitBranch}
    git reset --hard origin/master
    git stash clear # housekeeping

    echo -e "\nUpdating binaries..."
    # Update the Binaries
    branch="master"
    git --work-tree=/usr/local/bin --git-dir=/usr/local/bin/.git pull origin "${branch}"

    # dvmega cast-specific stuff
    castResult=$(isDVmegaCast)
    if [ "$castResult" == "true" ]; then
	echo -e "\nUpdating DVMega CAST software..."
        branch="master"
	cd /opt/cast
	git reset --hard origin/master
	git --work-tree=/opt/cast --git-dir=/opt/cast/.git pull origin "${branch}"
	git reset --hard origin/master
    fi

    echo -e "\nUpdating Hostfiles..."
    # Host Files Update
    if ! [ -f /root/M17Hosts.txt ]; then
    	echo -e "# Format: Reflector Name IP Port\n# Example:\n# M17-000    81.231.241.25    17000\n\n" > /root/M17Hosts.txt
    fi
    echo -e "\nPerforming maint. tasks..."
    # if css does not exist, install default one
    if [ ! -f "/etc/wpsd-css.ini" ] ; then
	curl -Ls -A "WPSD-SuppFiles (WPSD-Daily-Nightly-Tasks) ${uaStrSF}" "$SUPPORTING_FILES_REPO"/WPSD-CSS.ini -o /etc/wpsd-css.ini
    fi

    # setup our own native NextionDriver service...
    # Updated 2/23/2023 - W0CHP:
    # TGIFspots contain really weird hacks/scripts, etc.[1] for their Nextion
    # screens, and it all collides with WPSD and our native Nextion driver
    # support.  So lets ignore TGIFspots altogether.
    # [1] <https://github.com/EA7KDO/Scripts>
    if [ -f '/etc/cron.daily/getstripped' ] || [ -d '/usr/local/etc/Nextion_Support/' ] || [ -d '/Nextion' ] ; then # these are hacks that seem to exist on TGIFspots.
        :
    else # yay no tgifspot hacks!
    	if [ ! -f '/lib/systemd/system/nextiondriver.service' ] ; then # lets get a native service placeholder installed at the very least
    	    curl -Ls -A "WPSD-SuppFiles (WPSD-Nightly-Tasks) ${uaStrSF}" $SUPPORTING_FILES_REPO/mmdvmhost.service-W0CHP  -o /lib/systemd/system/mmdvmhost.service
   	    curl -Ls -A "WPSD-SuppFiles (WPSD-Nightly-Tasks) ${uaStrSF}" $SUPPORTING_FILES_REPO/nextiondriver.service-W0CHP  -o /lib/systemd/system/nextiondriver.service
    	    # Enable the NextionDriver service
    	    systemctl daemon-reload > /dev/null 2>&1
    	    systemctl stop nextiondriver.service > /dev/null 2>&1
    	    /usr/bin/killall NextionDriver > /dev/null 2>&1
    	    systemctl enable nextiondriver.service > /dev/null 2>&1
    	fi
    	if [ -f '/lib/systemd/system/nextiondriver.service' ] ; then # for non-Nextion instances, ensure existing service is ours vs. ON7LDS'
    	    if systemctl status nextiondriver.service | grep masked > /dev/null 2>&1 ; then
	    	systemctl unmask nextiondriver.service > /dev/null 2>&1
	    	systemctl daemon-reload > /dev/null 2>&1
    	    fi
	    if [ "`sed -nr "/^\[General\]/,/^\[/{ :l /^\s*[^#].*/ p; n; /^\[/ q; b l; }" /etc/mmdvmhost | grep "Display" | cut -d= -f 2`" != "Nextion" ]; then
	    	if grep -qo 'killall' /lib/systemd/system/nextiondriver.service ; then
	    	    curl -Ls -A "WPSD-SuppFiles (WPSD-Nightly-Tasks) ${uaStrSF}" $SUPPORTING_FILES_REPO/mmdvmhost.service-W0CHP  -o /lib/systemd/system/mmdvmhost.service
	    	    curl -Ls -A "WPSD-SuppFiles (WPSD-Nightly-Tasks) ${uaStrSF}" $SUPPORTING_FILES_REPO/nextiondriver.service-W0CHP  -o /lib/systemd/system/nextiondriver.service
            	    systemctl daemon-reload > /dev/null 2>&1
            	    systemctl stop nextiondriver.service > /dev/null 2>&1
            	    /usr/bin/killall NextionDriver > /dev/null 2>&1
	    	    systemctl enable nextiondriver.service > /dev/null 2>&1
	        fi
	    fi
    	fi
    	# now, disable nextion driver stuff if display != Nextion in mmdvmhost config...
    	if [ "`sed -nr "/^\[General\]/,/^\[/{ :l /^\s*[^#].*/ p; n; /^\[/ q; b l; }" /etc/mmdvmhost | grep "Display" | cut -d= -f 2`" != "Nextion" ]; then
    	    if grep -qo 'Requires=nextiondriver.service' /lib/systemd/system/mmdvmhost.service ; then # if nextion is re'q, get rid of it
            	sed -i '/Requires=nextiondriver.service/d' /lib/systemd/system/mmdvmhost.service
            	systemctl daemon-reload > /dev/null 2>&1
    	    fi
    	    if grep -qo 'RequiredBy=mmdvmhost.service' /lib/systemd/system/nextiondriver.service ; then # if mmdvmhost is re'q, get rid of it
            	sed -i '/RequiredBy=mmdvmhost.service/d' /lib/systemd/system/nextiondriver.service
            	systemctl daemon-reload > /dev/null 2>&1
    	    fi
    	    # stop and disable
    	    if ! systemctl status nextiondriver.service | grep 'disabled;' > /dev/null 2>&1 ; then
	    	systemctl stop nextiondriver.service > /dev/null 2>&1
	    	/usr/bin/killall NextionDriver > /dev/null 2>&1
	    	systemctl disable nextiondriver.service > /dev/null 2>&1
	    	systemctl daemon-reload > /dev/null 2>&1
     	    fi
    	fi
    	# user has Nextion defined in mmdvmhost, so let's natively support it:
    	if [ "`sed -nr "/^\[General\]/,/^\[/{ :l /^\s*[^#].*/ p; n; /^\[/ q; b l; }" /etc/mmdvmhost | grep "Display" | cut -d= -f 2`" = "Nextion" ]; then
    	    if grep -qo 'killall' /lib/systemd/system/nextiondriver.service ; then # our native support has not been installed/config'd, user likely using ON7LDS script - init!
	    	systemctl stop nextiondriver.service > /dev/null 2>&1
	    	/usr/bin/killall NextionDriver > /dev/null 2>&1
	    	curl -Ls -A "WPSD-SuppFiles (WPSD-Nightly-Tasks) ${uaStrSF}" $SUPPORTING_FILES_REPO/mmdvmhost.service-W0CHP  -o /lib/systemd/system/mmdvmhost.service
	    	curl -Ls -A "WPSD-SuppFiles (WPSD-Nightly-Tasks) ${uaStrSF}" $SUPPORTING_FILES_REPO/nextiondriver.service-W0CHP  -o /lib/systemd/system/nextiondriver.service
	    	systemctl daemon-reload > /dev/null 2>&1
	    	systemctl enable nextiondriver.service > /dev/null 2>&1
	    	systemctl restart nextiondriver.service > /dev/null 2>&1
	    	systemctl restart mmdvmhost.service > /dev/null 2>&1
	    fi
    	fi
    fi
    conn_check
else
    echo "WPSD Update Server connection failure! Will try again during next scheduled job tommorrow."
fi

# Start all the services...
echo -e "\nStarting services..."
/usr/local/sbin/wpsd-services start > /dev/null 2>&1

# run any slipstream tasks
/usr/local/sbin/.wpsd-slipstream-tasks > /dev/null 2>&1

echo -e "\nNightly tasks done!\n"

exit 0

