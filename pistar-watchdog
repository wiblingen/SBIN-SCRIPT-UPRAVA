#!/usr/bin/python

###########################################################################
#                                                                         #
#                         WPSD Service Watchdog                           #
#                                                                         #
#                     Refactored Big Time by - W0CHP                      #
#                                                                         #
###########################################################################

import subprocess
import time
import os
import configparser

time.sleep(90)  # Let services settle after startup

# Function to check if a service is enabled in the MMDVMHost config
def is_service_enabled(config, section, option="Enable"):
    try:
        if config.has_section(section) and config.has_option(section, option):
            return config.getboolean(section, option)
        return False
    except (configparser.NoSectionError, configparser.NoOptionError, ValueError):
        return False

# Function to check if MMDVMHost should be managed
def is_mmdvmhost_enabled():
    config_path = "/etc/dstar-radio.mmdvmhost"
    if not os.path.isfile(config_path):
        return False

    config = configparser.ConfigParser()
    config.read(config_path)
    return config.has_section("Modem") and config.get("Modem", "Hardware", fallback="").strip() != ""

# Function to check if a cross-mode service is enabled
def is_crossmode_enabled(service_name):
    config_path = f"/etc/{service_name.lower()}"  # Example: /etc/dmr2ysf
    if not os.path.isfile(config_path):
        return False

    config = configparser.ConfigParser()
    config.read(config_path)
    return config.has_option("Enabled", "Enabled") and config.get("Enabled", "Enabled", fallback="0") == "1"

# Function to check and restart a service if needed.
# 'binary_name' is used for checking the running process,
# while 'service_name' (in lowercase) is used for systemctl commands.
def check_and_restart_service(binary_name, service_name):
    check_proc = subprocess.run(f'pgrep {binary_name}', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if check_proc.returncode != 0:  # If the service is NOT running
        msg = f"{binary_name} is not running. Restarting {binary_name} service..."
        print(f"[INFO] {msg}")
        os.system(f'logger -t WPSD-Watchdog "{msg}"')
        os.system(f'/bin/systemctl stop {service_name}.service > /dev/null 2>&1')
        time.sleep(1)
        os.system(f'/bin/systemctl start {service_name}.service > /dev/null 2>&1')
        time.sleep(5)

# Function to handle cross-mode dependencies and service restart
def handle_crossmode_dependencies(service_name):
    # Define the service dependencies for each cross-mode service using proper binary names.
    # These names match the keys in your services dictionary.
    dependencies = {
        'ysf2dmr': ['YSFGateway', 'DMRGateway'],
        'ysf2nxdn': ['YSFGateway', 'NXDNGateway'],
        'ysf2p25': ['YSFGateway', 'P25Gateway'],
        'dmr2ysf': ['DMRGateway', 'YSFGateway'],
        'dmr2nxdn': ['DMRGateway', 'NXDNGateway']
    }

    service_key = service_name.lower()
    # Check and restart the dependencies first
    if service_key in dependencies:
        for dep_service in dependencies[service_key]:
            #print(f"[INFO] Checking {dep_service} service for {service_name} dependency.")
            # Use the proper binary name (dep_service) and the lowercase version for the systemd unit.
            check_and_restart_service(dep_service, dep_service.lower())

    # Now check and restart the cross-mode service itself.
    #print(f"[INFO] Checking {service_name} service.")
    # For cross-mode service, the binary is as provided and the unit name is its lowercase.
    check_and_restart_service(service_name, service_name.lower())

while True:  # Main loop
    mmdvmhost_config = "/etc/mmdvmhost"

    # Load MMDVMHost configuration
    mmdvm_config = configparser.ConfigParser()
    if os.path.isfile(mmdvmhost_config):
        mmdvm_config.read(mmdvmhost_config)

    # Standard MMDVMHost services to check
    services = {
        "ircddbgateway": ["D-Star Network"],
        "timeserver": ["Time Server"],
        "DMRGateway": ["DMR Network"],
        "NXDNGateway": ["NXDN Network"],
        "P25Gateway": ["P25 Network"],
        "YSFGateway": ["System Fusion Network"],
        "YSFParrot": ["System Fusion Network"],
        "NXDNParrot": ["NXDN Network"],
        "P25Parrot": ["P25 Network"],
        "DAPNETGateway": ["DAPNET"],
        "M17Gateway": ["M17 Network"]
    }

    # Check and restart MMDVMHost separately (special condition)
    if is_mmdvmhost_enabled():
        check_and_restart_service("MMDVMHost", "mmdvmhost")

    # Check and restart non-cross-mode services
    for binary, config_section in services.items():
        service_unit = binary.lower()  # Systemd unit names are lowercase
        if any(is_service_enabled(mmdvm_config, section) for section in config_section):
            check_and_restart_service(binary, service_unit)

    # Cross-mode services (check for Enabled=1)
    cross_modes = ["YSF2DMR", "YSF2NXDN", "YSF2P25", "DMR2YSF", "DMR2NXDN"]

    for service in cross_modes:
        if is_crossmode_enabled(service):
            #print(f"[INFO] {service} is enabled. Checking dependencies and service restart.")
            handle_crossmode_dependencies(service)

    time.sleep(120)  # Wait before next check

